#!/bin/bash
ACTION="$1"
TODAYDATE="`date +%Y%m%d`"
PATCHNAME="$TODAYDATE""_$2"
PATCHROOT="/home/xiaoya.qi/work_his"
LOCALPATCHDIR="$PATCHROOT/$PATCHNAME"
SVNAUTOBUILDDIR="/home/xiaoya.qi/svn/AUTOBUILD"
SVNPATCHDIR=
ACTIONS="init,open,test,release,apply,list"
HISTORY_FILE="$LOCALPATCHDIR/.patch_history.$$"
TMP_FILE="$LOCALPATCHDIR/.tmp.$$"
DB_HOST=""
VDCVERSION=

function war 
{
	echo "WARNING: $1" | tee -a $HISTORY_FILE
}

function abort
{
	echo "$1"
	echo "$HISTORY_FILE"
	exit 1
}

function svn_commit
{
    svn_dir=$1
	cd $svn_dir
	svn.exe update
	svn.exe add ./ --force
	if (( $? ==0 )); then 
		echo "Released to $svn_dir successfully. "
		sleep 3
	fi
	svn.exe commit -m "$PATCHNAME"
}

function set_svn_path
{
	read -p "Please select the VDC VERSION(5|6): " x
	if (( $x == 5 )); then 
        SVNPATCHDIR="$SVNAUTOBUILDDIR/005/$TODAYDATE"
	elif (( $x == 6 )); then
        SVNPATCHDIR="$SVNAUTOBUILDDIR/006/$TODAYDATE"
	else
		abort "Error : Only support version 5 , 6 ."
	fi
	cd $SVNAUTOBUILDDIR
	svn.exe update
	if [[ ! -d $SVNPATCHDIR ]]; then
		abort "$SVNPATCHDIR does not exist."
	fi 
	cd -
}

function get_host
{
	read -p "Which server you want to test on (155|51...):" x
	DB_HOST="10.10.10.$x"
	ping $DB_HOST >>$HISTORY_FILE 2>&1
	if (( $? != 0 )); then 
		abort "Error: Invalid host : $DB_HOST . "
    fi

	let count=1
	while true; do
		sleep 5 | telnet $DB_HOST 5432 >>$HISTORY_FILE 2>&1
		grep "Connected to $DB_HOST" $HISTORY_FILE
		if (( $? != 0 )); then 
			war "Can not connect to $DB_HOST database. "
		else
			break
		fi 
		ps -ef|grep "pg_listen_ip"
		if (( $? != 0 )); then 
			MobaXterm.exe -newtab "pg_listen_ip $DB_HOST 1"
		fi

		let count+=1
		if (( $count > 100 )); then 
			abort "Error: Make sure database is running on $DB_HOST . "
		fi 
		sleep 10
	done
	return 0 
}

function run_sql_file
{
	sql_file=$1
	if [[ ! -f $sql_file ]] ; then 
		war "$sql_file does not exist. "
		return 1 
	fi 

	echo "Running $sql_file on host $DB_HOST "
	psql -h $DB_HOST -U root vdc_repos < $sql_file >$TMP_FILE 2>&1
	cat $TMP_FILE |grep -i -e 'error' -e 'warning' >/dev/null
	if (( $? == 0 )); then 
    	war "Failed to apply sql $sql_file to $DB_HOST . " 
		return 1
	fi 
	return 0
}


# Check input parameters
echo "$HISTORY_FILE"
if (( $# < 1 )); then 
	abort "Usage : $0 \[init|open|test|release|apply|list] [patchname] [5|6(version)] "

fi 

# Check action
echo $ACTIONS |grep "$ACTION" >/dev/null
if (( $? != 0 )); then 
	abort "Action must be one of $ACTIONS . "
fi 

# Check vdc version
#if (( $VERSION == 5 )); then
#    SVNPATCHDIR="$SVNPATCHDIR""/005"
#elif (( $VERSION == 6 )); then 
#    SVNPATCHDIR="$SVNPATCHDIR""/006"
#fi 

# Check 
if [[ ! -d $LOCALPATCHDIR && $ACTION == "init" ]]; then 
dirs="common
debug
test
"
    for dir in ${dirs}; do
    	mkdir -p $LOCALPATCHDIR/$dir
	done
	echo "Init $PATCH_NAME succesfully , path $LOCALPATCHDIR."
elif [[ -d $LOCALPATCHDIR && $ACTION == "init" ]]; then 
    abort "$LOCALPATCHDIR has exist .".
fi

if [[ $ACTION == "test" ]]; then 
    echo "Testing $LOCALPATCHDIR ... "
	test_sqls=`find $LOCALPATCHDIR/test -name *.sql` 
	if (( $? != 0 )); then 
		abort "Error: test sql files do not exist. "
	fi 
	get_host
	for sql_file in ${test_sqls}; do 
    	run_sql_file $sql_file >>$HISTORY_FILE
	done 
	grep -i -e 'warning' -e 'error' $HISTORY_FILE
	if (( $? == 0 )); then 
	    echo -n ""
	    echo -n ""
	    echo -n ""
		abort "Error: Failed to pass test ($LOCALPATCHDIR) !" 
	fi 
	echo "Passed sql test ... "
fi 

if [[ $ACTION == "list" ]]; then 
	ls -dl $PATCHROOT/
fi

if [[ $ACTION == "release" ]]; then 
    echo "Make sure your patch pre is $TODAYDATE ....."
	sleep 3

	sql_files=`find $LOCALPATCHDIR -name *.sql |sort | grep -e "00[0-8]_"` 
	if (( $? != 0 )); then 
		abort "Error: sql files do not exist. "
	fi 
	get_host
	for sql_file in ${sql_files}; do 
    	run_sql_file $sql_file >>$HISTORY_FILE
	done 
	grep -i -e 'warning' -e 'error' $HISTORY_FILE
	if (( $? == 0 )); then 
	    echo -n ""
	    echo -n ""
	    echo -n ""
		abort "Error: Failed to apply sql files in ($LOCALPATCHDIR) !" 
	fi 
	echo "Success to apply sqls in $LOCALPATCHDIR to server $DB_HOST ."

	echo "Committing the sqlfiles to AUTOBUILD/$TODAYDATE ... "
	sleep 3
	set_svn_path
	echo "cp -rfp $LOCALPATCHDIR $SVNPATCHDIR"
	cp -rfp $LOCALPATCHDIR/* $SVNPATCHDIR/
	rm -rf $SVNPATCHDIR/debug
	rm -rf $SVNPATCHDIR/test
    svn_commit "$SVNPATCHDIR"
fi 


exit 0 

